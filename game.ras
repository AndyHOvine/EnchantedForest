program EnchantedForest;
/*

	Original game created by Fabrizio Caruso as a 10 liner BASIC program.
	https://github.com/Fabrizio-Caruso/CBM-BASIC-10-liners/tree/master/Vic20/EnchantedForest

	This version created & expanded by Andy Hewitt - Hewco.uk

	-------------------
	
	Dev Note:	Zero Page addresses have been defined in project settings
				for the Vic 20 build.
				
				_memory 	- all variables and resources
				_constants	- game constants & parameters
				_lookup		- read only look up tables
*/
var  

@define DEBUG		1


// -------------------------------------------------------------------------------

@include "_constants.ras"			// GAME PARAMETERS and CONSTANTS
@include "_memory.ras"				// Include Resources and variables


// -------------------------------------------------------------------------------

@startblock $2000 "GAME"


// -------------------------------------------------------------------------------
// look up data
@include "_lookup.ras"				// read only lookup tables


// -------------------------------------------------------------------------------
// source files

@include "music.ras"
@include "vbl.ras"
@include "level.ras"
@include "player.ras"


// -------------------------------------------------------------------------------
// **** MAIN PROGRAM ****

begin

	m1 := musCh1;
	//m2 := musCh1;
	musDelay := 5;
	musTime := 0;

	Vbl_Init(); // call before set display mode
	
	vbmSetDisplayMode( 0 );
	vbmclear( 0 );
	vbmClearColor( GREEN );	

	AUX_COLOR_AND_VOLUME := %00000010;
	screen_bg_color := BLACK + SCREEN_BG_BLACK;


	Level_Generate();

	pd := 0;
	Player_SetAnimation();

	while (true) offpage do 
	begin
	
		vbmSetPosition2( px, py );
		vbmDrawSprite8E( pa, pb );

		@ifdef DEBUG
		screen_bg_color := BLACK + SCREEN_BG_BLACK;
		@endif
		
		while (ticks = oldticks) do begin end;
		oldticks := ticks;

		@ifdef DEBUG
		screen_bg_color := CYAN + SCREEN_BG_BLACK;
		@endif
		
		vbmSetPosition2( px, py );
		vbmDrawSprite8E( pa, pb );


		if ticks & 1 = 0 then
		begin
			readjoy1();
		
			// force in keyboard
			if getkey() = KEY_I then joy1 := JOY_UP;
			if getkey() = KEY_K then joy1 := JOY_DOWN;
			if getkey() = KEY_J then joy1 := JOY_LEFT;
			if getkey() = KEY_L then joy1 := JOY_RIGHT;

			if (joy1 & JOY_UP) then begin py := py - 2; pd:=4+(py&4)>>1; Player_SetAnimation(); end;
			if (joy1 & JOY_DOWN) then begin py := py + 2; pd:=4+(py&4)>>1; Player_SetAnimation(); end;
			if (joy1 & JOY_LEFT) then begin px := px - 2; pd:=2; Player_SetAnimation(); end;
			if (joy1 & JOY_RIGHT) then begin px := px + 2; pd:=0; Player_SetAnimation(); end;
		
			cm := addresstable(colmem, px>>3, py>>4);
			cm[0] := white;

		end;

		
	end;

end.
